import { Injectable } from '@angular/core';
import {afficherCategories} from "../../../utils/afficherCategories";
import {formatCurrentDateUs} from "../../../utils/getFormattedDate";

@Injectable({
  providedIn: 'root'
})
export class GetPromptsService {

  // √©valuer une liste d'articles provenant d'une API de news.
  // retourne un objet avec des instructions pour analyser chaque article selon des crit√®res sp√©cifiques li√©s au jardinage en Belgique.
  selectArticle(newsApiData: any): any {
    return {
      systemRole: {
        "role": "system",
        "content": `
        Analysez une liste d'articles pour d√©terminer s'il y a un article pertinent pour un blog.
Consid√©rez si l'article est adapt√© √† des amateurs ou professionnels et s'il est li√© aux cat√©gories ${afficherCategories(', ')}.
# Crit√®res d'√©valuation
- V√©rifiez si l'article est pertinent pour des lecteurs amateurs ou professionnels selon ces cat√©gories : ${afficherCategories(', ')}.
- Assurez-vous que le contenu est li√© aux cat√©gories sp√©cifi√©es, directement ou indirectement.
# Instructions de Sortie
Si vous trouvez un article pertinent, retournez un objet JSON valide avec les champs suivants :
- \`"valid"\` : boolean - indique si l'article est pertinent.
- \`"explication"\` : objet avec raisons pourquoi chaque article est pertinent ou non pour le blog. Incluez une cl√© pour chaque article sous la forme \`"raison-article-1"\`, \`"raison-article-2"\`, etc.
  - Exemple: \`"raison-article-1": "Non pertinent car il parle de... ."\`, \`"raison-article-2": "Pertinent car il parle de... ."\`
- \`"url"\` : URL de l'article valid√©
- \`"image_url"\` : URL de l'image de l'article valid√©
Assurez-vous que chaque ligne du JSON est sur une ligne s√©par√©e sans aucun texte suppl√©mentaire.
# Format de Sortie
Le r√©sultat doit √™tre un JSON strictement valide comme ceci:

{
    "valid": [true/false],
    "explication": {
        "raison-article-1": "[Explication pourquoi cet article est pertinent ou non pertinent]",
        "raison-article-2": "[Explication pourquoi cet article est pertinent ou non pertinent]",
        ...
    },
    "url": "[URL de l'article]",
    "image_url": "[URL de l'image de l'article]"
}

# Notes
- Analysez chaque article dans la liste fournie et justifiez pourquoi il est pertinent ou non.
- Ne retournez **qu'un seul objet JSON** correspondant √† l'article pertinent si trouv√©.
- Pour les articles jug√©s non pertinents, l'explication doit tout de m√™me √™tre fournie dans le champ \`explication\`.
- Aucune structuration ou texte suppl√©mentaire n'est n√©cessaire en dehors du JSON.
        `},
      userRole: {
        "role": "user",
        "content": `Voici la liste des articles √† √©valuer : ${JSON.stringify(newsApiData)}.
      Tu dois retourner un objet JSON avec un seul article valide s'il y en a un, avec un tableau 'explication' contenant la raison de pertinence ou non pertinence pour chaque article analys√©.
      `
      }
    }
  }

  generateArticle(article?: any): any {
    return {
      systemRole: {"role": "system","content":`

       Tu es charg√© de r√©√©crire un article d√©taill√© pour un blog de jardinage situ√© √† Bruxelles,
       en pr√©servant un maximum de d√©tails techniques et contextuels tout en int√©grant de nouveaux √©l√©ments pertinents si n√©cessaire.
       Inclue une touche d'humour subtilement. √âlabore un article structur√© en HTML valide tenant compte des enjeux √©cologiques.
       Pr√©sente l'article sous forme de JSON en respectant la structure fournie.

# Instructions
- **Titre**: Cr√©e un titre court et pertinent pour l'article.
- **Phrase accroche**: R√©dige une phrase accrocheuse d'environ 45 mots pour encourager la lecture.
- **Article**: √âcris l'article en HTML valide, minifi√© sur une seule ligne avec des caract√®res sp√©ciaux √©chapp√©s, suivant cette structure :
  - 6 paragraphes, chaque paragraphe avec :
    - **Texte du paragraphe** sous forme <span id="paragraphe-{n}">
    <h4>Ecris un titre accrocheur du paragraphe {n}</h4>
    <ul><li>Trouve une question en sous-titre du paragraphe {n} (environ 10 mots)</li></ul>
    <p>R√©dige un texte du paragraphe {n} avec minimum 200 mots et pas moins !</p>
    </span>
    - **Citation**: Trouve et inclue une citation c√©l√®bre qui se rapporte au sujet trait√©.
    - **Liens**: Mentionne le premier lien utilis√© pour r√©diger le post sous "lien1".
    - **Cat√©gorie**: Choisis une cat√©gorie ad√©quate parmi celles fournies par ${afficherCategories(', ')}.

  # Output Format
    Pr√©sente le r√©sultat sous la forme d'un JSON valide structur√© comme suit :
{
  "titre": "Titre court pertinent pour le post.",
  "phrase_accroche": "Phrase accrocheuse d'environ 45 mots.",
  "article": "
  <span id="paragraphe-1">
  <h4>Ecris un titre accrocheur du paragraphe 1</h4>
  <ul><li>Trouve une question en sous-titre du paragraphe 1 (environ 10 mots)</li></ul>
  <p>R√©dige un texte du paragraphe 1 avec minimum 200 mots et pas moins !</p>
  </span> (Continuer ainsi pour tous les paragraphes avec minimum 200 mots et pas moins par paragraphe !, minifi√© sur une seule ligne).",
  "citation": "Citation c√©l√®bre pertinente avec son auteur si connu.",
  "lien_url_article": {
    "lien1": "URL du premier lien utilis√©."
  },
  "categorie": "Cat√©gorie choisie parmi propos√©es."
}

  # Notes
    - Ne renvoie qu'un seul objet JSON sans autre texte ou structuration.
    - Assure l'articulation logique et l'alignement du contenu avec le th√®me pour le lecteur cible.
    - Utilise des balises HTML appropri√©es et garantis la validit√© du code g√©n√©r√©.
      `},
      userRole: { "role": "user", "content": `utilise les informations contenu sur la page dont l 'url est la suivante:  ${article} pour remplir les infos.` }
    }
  }

  upgradeArticle(article: any): any {
    return {
      systemRole: {"role": "system","content":`
Improve a segment of a landscaper's blog entry by adding additional information that complements the existing content. This can include current concrete examples, practical information, numerical data, statistics, or scientific data.

# Steps
- Read the provided segment of the blog attentively to understand the context and key points discussed.
- Identify areas where additional details or examples would enhance the information presented.
- Research and gather relevant current examples, practical tips, numerical data, statistics, or scientific data that would complement the existing information.
- Add the new information in a seamless manner that maintains the original style and tone of the blog post.

# Output Format
Provide the enhanced blog segment in a valid JSON format as follows: {"upgraded": "Response upgraded chapitre..."} Ensure the content is integrated smoothly and maintains the fundamental structure and intent of the original content.

# Examples
**Original Segment:**
"Un bon entretien de la pelouse commence par une coupe r√©guli√®re. Mais saviez-vous qu'il y a des techniques pour am√©liorer la sant√© de votre gazon?"

**Enhanced Segment:**
{"upgraded": "Un bon entretien de la pelouse commence par une coupe r√©guli√®re. Saviez-vous que pour optimiser la sant√© de votre gazon, il est recommand√© de ne pas tondre plus d'un tiers de la longueur des brins lors de chaque coupe? Par exemple, durant les mois d'√©t√©, tondre la pelouse √† une hauteur de 5 cm permet de conserver l'humidit√© et d'am√©liorer la photosynth√®se. De plus, une √©tude de 2022 a d√©montr√© que l'application d'engrais azot√©s au printemps augmente la densit√© du gazon de 25% en moyenne."}

# Notes
- Ensure all added information is accurate and up-to-date.
- Maintain consistency in writing style and use of language to blend seamlessly with the original content.
    `},
      userRole: { "role": "user", "content": `Voici le texte √† am√©liorer ${article}.` }
    }
  }

  formatInHtmlArticle(article: string): any {
    return {
      systemRole: {"role": "system","content":`
     Int√©grer des balises HTML aux textes afin de structurer le contenu et en am√©liorer la lisibilit√©, sans modifier le contenu texte ou les balises HTML d√©j√† pr√©sentes.
- Respecter les √©tapes suivantes pour la mise en forme.
# Steps
1. Entourer les phrases cl√©s avec la balise \`<b>\` pour les mettre en √©vidence et attirer l'attention du lecteur.
2. Int√©grer un emoji pertinent illustrant le sujet du paragraphe √† l'int√©rieur de chaque titre en \`<h4>\` d√©j√† pr√©sent sans ajouter de nouveaux \`<h4>\`.
3. Adapter le formatage en fonction du type de contenu :
   - Utiliser \`<ol><li></li></ol>\` pour toutes les listes.
   - Utiliser la balise \`<u>\` pour souligner des informations sp√©cifiques.
   - Utiliser \`<em>\` pour mettre en valeur des termes importants.
   - Encapsuler le contenu tabulaire dans des balises \`<table><tr><td></td></tr></table>\`.
# Output Format
Pr√©senter le r√©sultat sous la forme d'un JSON valide structur√© comme suit :
{
  "upgraded": "<html_content_here>"
}
# Examples
**Input**:
Un texte avec du contenu vari√©, incluant des phrases cl√©s, des titres, des listes et des informations tabulaires existantes.
**Output**:
{
  "upgraded": "<h4>üé® Pr√©sentation du Projet </h4><b>Phrases cl√©s importantes.</b><ul><li>Point 1</li><li>Point 2</li></ul><table><tr><td>Valeur</td></tr></table>"
}
*Note: Les phrases cl√©s, listes, et contenus tabulaires dans la r√©ponse r√©elle doivent correspondre √† ce qui est fourni dans le texte original.*
# Notes
- Le JSON doit strictement contenir les balises HTML requises ou d√©j√† pr√©sentes, sans aucun texte ou formatage non essentiel au-del√† de celles sp√©cifi√©es.
- V√©rifier la validit√© du code HTML g√©n√©r√© en conformit√© avec les instructions pour chaque type de contenu.
      `},
      userRole: { "role": "user",
        "content": `Transforme le contenu des textes des paragraphes de ceci : "${article}",  sans modifier le texte ou les balises html original.` }
    }
  }

  meteoArticle(): any {
    return {
      systemRole: {"role": "system","content":`
 Cr√©ez une pr√©vision m√©t√©orologique po√©tique pour le blog d‚Äôun jardinier, en int√©grant vos doubles perspectives de m√©t√©orologue et de po√®te.
 Utilisez un langage √©vocateur pour illustrer les effets du temps sur les activit√©s de jardinage.
 La une pr√©vision m√©t√©orologique factuelle pour Bruxelles, doit comprendre la temp√©rature minimale et maximale, la vitesse du vent et la dur√©e d'ensoleillement aujourd'hui.

# Output Format
Pr√©sente le r√©sultat sous la forme d'un JSON valide structur√© comme suit :
{"meteo": "Votre pr√©vision m√©t√©orologique po√©tique ici."}

# Notes
- Soyez attentif √† la mani√®re dont les conditions m√©t√©orologiques influencent les activit√©s de jardinage.
- Utilisez des m√©taphores et des images sensorielles pour amener votre prose √† la vie.
- Ne retournez **qu'un seul objet JSON**
- Aucune structuration ou texte suppl√©mentaire n'est n√©cessaire en dehors du JSON.
      `},
      userRole: { "role": "user", "content": `Donne la meteo en date du ${formatCurrentDateUs()}. Pour Bruxelles` }
    }
  }

  getPromptGenericSelectKeyWordsFromChapitresInArticle(titreArticle: string, chapitreKeyWordList: string[]) {
    return {
      systemRole: {
        role: "system",
        content: this.getPerplexityPromptSystemSelectKeyWordsFromChapitresInArticle()
      },
      userRole: {
        role: "user",
        content: this.getPerplexityPromptUserSelectKeyWordsFromChapitresInArticle(titreArticle, chapitreKeyWordList)
      }
    }
  }

  getPerplexityPromptSystemSelectKeyWordsFromChapitresInArticle(){
    const prompt = `Identifie le mot-cl√© unique le plus pertinent √† partir du titre d'un blog pour effectuer une recherche d'image sur le site Unsplash.com.
Extrait un seul mot-cl√© du titre du blog. Assure-toi que ce mot r√©sume efficacement l'essence du titre ou capte l'atmosph√®re centrale pour maximiser la pertinence des images recherch√©es.
# Steps
1. **Analyse du Titre**: Lis attentivement le titre du blog et les concepts cl√©s et le th√®me principal.
2. **S√©lection du Mot-cl√©**: Choisis un mot unique qui encapsule le sujet principal ou l'atmosph√®re globale du titre et traduis le en anglais.
2. **Explication du Mot-cl√©**: Explique pourquoi ce mot clefs.
3. **V√©rification**: Assure-toi que le mot-cl√© choisi est g√©n√©ral et suffisamment repr√©sentatif pour √™tre utilis√© efficacement dans une recherche d'image.
# Output Format
- Fournis un seul mot en r√©sultat, repr√©sentant le mot-cl√© choisi sous cette forme json {"keyWord":"Mots choisis", "explanation":""}.
# Examples
**Input**: "Exploration des merveilles de l'oc√©an: secrets des abysses"
**Reasoning**:
- Le titre parle de l'oc√©an et des secrets cach√©s sous l'eau.
- Le mot "oc√©an" capture bien le sujet principal.
**Output**: "{"keyWord":"ocean", "explanation":"Le mot oc√©an capture bien le sujet principal"} et rien d 'autre, ne rajoute pas de texte ou d explication dans la r√©ponse !
---
**Input**: "Les charmes hivernaux des montagnes enneig√©es"
**Reasoning**:
- Ce titre met l'accent sur un paysage sp√©cifique et une ambiance saisonni√®re.
- Le mot "montagnes" est central pour la recherche visuelle.
**Output**: "{"keyWord":"mountains", "explanation":"Le mot montagnes est central pour la recherche visuelle"}"
# Notes
- Si le titre contient plusieurs th√®mes, choisis le mot-cl√© qui repr√©sente le mieux le message principal ou l'√©l√©ment le plus visuel.
- Le mot-cl√© choisi doit √™tre suffisamment large pour couvrir un √©ventail d'images mais pr√©cis pour rester pertinent.`
    return prompt;
  }

  getPerplexityPromptUserSelectKeyWordsFromChapitresInArticle(titreArticle: string, chapitreKeyWordList: string[]){
    const prompt = `Voici le titre: ${titreArticle}.
    Si la liste n'est pas vide : ( ${chapitreKeyWordList} ) , choisi un autre mot que ceux qui sont deja dans cette liste.`
    return prompt;
  }

  getPromptGenericSelectBestImageForChapitresInArticle(article: string, images: any) {
    return {
      systemRole: {
        role: "system",
        content: this.getPerplexityPromptSystemcSelectBestImageForChapitresInArticle()
      },
      userRole: {
        role: "user",
        content: this.getPerplexityPromptUserSelectBestImageForChapitresInArticle(article, images)
      }
    }
  }

  getPerplexityPromptSystemcSelectBestImageForChapitresInArticle(){
    const prompt = `Tu es une IA sp√©cialis√©e dans l'analyse de textes et la s√©lection d'illustrations adapt√©es pour un blog de jardinier paysagiste.
            Ta t√¢che consiste √† lire un texte.
            En analysant le contenu du texte, identifie les th√®mes, le ton, et les √©l√©ments visuels ou concepts cl√©s qui pourraient √™tre illustr√©s.
            √Ä partir d'une liste d'URL d'images, trouve celle qui repr√©sente le mieux le contenu de ce texte,
            en consid√©rant l'aspect narratif et la coh√©rence avec le style du texte.`
    return prompt;
  }

  getPerplexityPromptUserSelectBestImageForChapitresInArticle(article: string, images: any){
    const prompt = `Voici le texte  : ${article}, ainsi qu'une liste d'URL d'images ${JSON.stringify(images)}.
            Analyse le contenu du texte pour en extraire les th√®mes et concepts principaux, et choisis l'image la plus repr√©sentative de cette partie du texte destin√©e sur un blog de jardinier.
            Assure-toi que l'image s√©lectionn√©e illustre bien l'ambiance et les √©l√©ments visuels pertinents.
            Donne l'url de l'image choisie en suivant ce format JSON: {"imageUrl":"url"}`
    return prompt;
  }

  getOpenAiPromptImageGenerator(description: string): string {
   return `G√©n√©rez une description pour cr√©er une image hyper r√©aliste sans texte ni repr√©sentations humaines, √† partir d'un sujet donn√© que voici : ${description}.
    Cette image servira d'illustration pour un blog.

- **Focus**: Concentrez-vous sur le sujet fourni et utilisez uniquement des √©l√©ments pertinents au th√®me.
- **Style**: Hyper r√©aliste, comme une photographie. Imaginez des d√©tails pr√©cis et vibrants pour donner vie √† l'image.
- **Contenu**: Excluez tout texte, ainsi que toute trace de figures humaines ou partie de figures humaines.

# √âtapes

1. Identifiez le sujet de l'image √† cr√©er.
2. Imaginez l'image en vous concentrant sur l'√©l√©ment principal.
3. Visualisez les √©l√©ments additionnels qui renforceront le r√©alisme sans distraire de l'√©l√©ment central.
4. Conceptualisez l'image finale.

# Format de Sortie

Fournir une description d√©taill√©e en texte d√©crivant visuellement l'image.

# Notes

- Assurez-vous que l'image propos√©e soit suffisamment neutre pour s'adapter √† divers contextes blog.
- V√©rifiez que les √©l√©ments choisis sont en accord avec le th√®me choisi, tout en respectant l'interdiction de tout texte ou forme humaine.`
  }

  getPromptGenericAddInternalLinkInArticle(article: any, listTitreId: any): any {
    return {
      systemRole: {
        role: "system",
        content: this.getPromptSystemAddInternalLinkInArticle()
      },
      userRole: {
        role: "user",
        content: this.getPromptUserAddInternalLinkInArticle(article, listTitreId)
      }
    }
  }
  getPromptSystemAddInternalLinkInArticle() {
    const prompt = `
Embed a specific hyperlink into an article using an HTML tag according to detailed guidelines, without altering the article's text or html beyond the insertion.

## D√©tails de la T√¢che

- **Source des Liens**: Utilisez un fichier JSON contenant une liste d'articles, chacun avec un 'id' et un 'titre'.
- **Insertion du Lien**: Faites un lien judicieux entre un des titres du JSON et le texte de l'article en int√©grant une balise de lien hypertexte.
- **R√®gles de Placement**: Un seul lien doit √™tre ins√©r√© par article, en priorit√© sur les occurrences les plus sp√©cifiques du titre.
- **Exactitude**: Ne pas modifier le texte d'origine ni du HTML d√©j√† pr√©sent, sauf pour l'insertion du lien.

# Steps

1. **Identifier le Titre**:
   - Parcourez les titres sp√©cifi√©s dans le JSON et le contenu de l'article pour d√©tecter un lien entre un mot-cl√© et un titre de la liste.

2. **Ins√©rer la Balise de Lien Hypertexte**:
   - Suivez ce format : \`<a class="myTooltip" href="https://jardin-iris.be/blog-detail.html?post={id}" id="{id}" title="{titre}">{mots_cl√©s}</a>\`
   - Remplacez les √©l√©ments par :
     - {id} : l'identifiant unique de l'article r√©f√©renc√© dans le JSON.
     - {titre} : le titre exact de l'article tel que fourni par le JSON.
     - {mots_cl√©s} : le texte exact de l'article qui co√Øncide avec le titre.

3. **Assurez-vous de la Pr√©cision**:
   - Confirmez que le lien est correctement ins√©r√© sans alt√©rer le texte original.

# Output Format

Pr√©sentez le r√©sultat comme suit:

\`\`\`JSON
{
  "upgraded": "<html_content_here>",
  "idToRemove": "id"
}
\`\`\`

# Notes

- Assurez une correspondance minimum entre le mot-cl√© dans le texte et les titres du JSON.
- Veillez √† n'ins√©rer qu'un seul lien par article pour √©viter toute redondance.
`;
    return prompt;
  }

  getPromptUserAddInternalLinkInArticle(article: string, listTitreId: any): string {
    const prompt: string = `Voici un tableau JSON contenant des articles avec les champs 'titre' et 'id' : ${JSON.stringify(listTitreId)}.
    Voici l'article √† traiter : ${JSON.stringify(article)}. Ins√©rez le lien hypertexte conform√©ment aux directives fournies, sans modifier le texte original
`;

    return prompt;
  }

}
